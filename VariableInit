package e_oop;

public class N9_Variablelnit {

	// 명시적 초기화
	int var = 10;
	static int classVar = 20;

	// 초기화 블럭 -여러줄이 필요할때 초기화 블럭을 열어 사용할 수 있다.
	{
		var = 30;
	}

	static {
		classVar = 40;
	}

	/*
	 * 생성자 - 클래스와 같은 이름의 메서드 - 인스턴스 변수를 초기화하기 위해 사용한다. - 클래스에 생성자는 반드시 하나 이상
	 * 존재해야 한다. - 직접 선언해주지 않으면 컴파일러가 기본 생성자를 만들어준다. - 생성자는 리턴타입이 없다. ★★★★★ -
	 * 생성자란? 메서드다.클래스이름과 똑같은 이름이다.new(클래스명=생성자)
	 */

	N9_Variablelnit() {
		// 변수를 초기화하기위해 생성자 만듦.
		var = 50; // int(인스턴스)변수를 초기화하기 위해 만듦

		// 생성자 사용 이유
		// 초기화에 여러줄의 코드가 필요할 때
		// 초기화에 파라미터가 필요할 때
		// ex) 아래 Init클래스

	}

	public static void main(String[] args) {
		Init i = new Init(); // =new Init() 생성자 호출
		i.a = 10;
		i.b = 20;
		i.c = 30;

		Init i2 = new Init();
		i2.a = 40;
		i2.b = 50;
		i2.c = 60;
		// 초기화 하려면 귀찮아......그래서 파라미터를 만들어 보자
	
		
		//파라미터이용 i3
		Init i3 = new Init(70,80,90);

	}
}
	//클래스
	class Init {
		int a;
		int b;
		int c;

		
		//파라미터 this
		Init(int a, int b, int c) {
			this.a = a;
			this.b = b;
			this.c = c;
			// this : 인스턴스 변수와 지역변수의 이름이 같을 때 둘을 구분하기 위해 사용.
			// 		   인스턴스 앞에 this를 붙임

		}
		
		//파라미터가 없는 생성자
		//오버로딩: 같은 이름의 메서드를 여러개 정의하는 것.
		//파라미터가 달라야한다.
		
		Init(){
			//파라미터초기화1.
			//a = 10;
			//b = 20;
			//c = 30;

			//파라미터 초기화2(간단)
			this(10,20,30); //생성자의 첫줄에만 사용할 수 있다.
			//c = 30; //생성자의 첫줄 아래에서는 사용가능.
			
			//this(): 생성자에서 다른 생성자를 호출할 때 사용한다.
			
			
		}	
				
}		




