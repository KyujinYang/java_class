package c_statement;

import java.util.Scanner;

public class RepetitiveStatement {

	public static void main(String[] args) {

		/*
		 * 
		 * 반복문 -for문 -while문 -do-while문
		 * 
		 * for문 -for(초기화 ; 조건식 ; 증감식) {} -포함하고 있는 문장들을 정해진 횟수만큼 반복하는 문장
		 * 
		 * >for문은 반복횟수가 정해진 경우에 사용한다. >★★★while문은 반복횟수를 모르거나 정해지지 않은 경우에 사용한다.
		 */

		// i라는 변수는 for문 안에서만 존재한다.
		for (int i = 1; i <= 10; i++) {
			System.out.println(i + "번째 반복");

		}

		// 규칙이 있는 문장들을 효율적으로 작성하기 위해 반복문을 사용한다.

		int sum = 0; // 1부터 10까지 합계를 저장할 것

		for (int i = 1; i <= 10; i++) {
			sum += i;
		}

		System.out.println(sum);

		// ----------------------------------------------------------------

		for (int i = 10; i >= 1; i--) {
			sum += i;
		}

		System.out.println(sum);

		// 1부터 100까지의 짝수의 합을 출력해주세요.

		/*
		 * sum = 0; for(int i = 1; i <=50; i++) {
		 * 
		 * sum += 2*i; } System.out.println(sum); -틀림
		 */

		// --------------------------------------------------------
		// sem답

		sum = 0;

		for (int i = 0; i <= 100; i++) {
			if (i % 2 == 0) {

				sum += i;
			}

		}
		System.out.println(sum);

		// --------------------------------------------------------

		sum = 0;

		for (int i = 0; i <= 100; i += 2) {
			sum += i;
		}
		System.out.println(sum);

		// 1부터 100까지 홀수의 합을 출력해주세요.

		sum = 0;
		// 짝수는 1부터 시작한다.
		for (int i = 1; i <= 100; i++) {

			if (i % 2 == 1) {
				sum += i;
			}
		}
		System.out.println(sum);

		// --------------------------------------------------------
		// sem

		sum = 0;

		for (int i = 1; i <= 100; i += 2) {
			sum += i;
		}

		System.out.println(sum);

		// 구구단 출력
		/*
		 * 2 * 1 = 2 2 * 2 = 4 ...
		 */

		// 2단만 출력
		for (int i = 1; i <= 9; i++) {
			System.out.println(2 + " * " + i + " = " + i * 2);

		}

		// 7단만 출력
		for (int i = 1; i <= 9; i++) {

			System.out.println(7 + " * " + i + " = " + i * 7);

		}

		// 중첩돼서 사용되는 for문
		// i가 1번 반복할 동안 j는 10번 반복한다

		for (int i = 1; i <= 10; i++) {
			System.out.println("i =" + i + "\t");
			for (int j = 1; j <= 10; j++) {
				System.out.println("j=" + j + "\t");
			}
			System.out.println();
		}

		// 구구단 전체를 출력해주세요.

		for (int i = 2; i <= 9; i++) {
			for (int j = 1; j <= 9; j++) {
				System.out.println(i + " * " + j + " = " + i * j);
			}
			System.out.println();
		}

		// 구구단 전체를 가로로 출력해주세요.

		for (int i = 1; i <= 9; i++) {
			for (int j = 2; j <= 9; j++) // 이게 앞쪽에 있는 변수
			{ // \t는 줄바꿈이라는 뜻
				System.out.print(j + " * " + i + " = " + j * i + "\t");
			}
			System.out.println();
		}

		/*
		 * while문 while(조건식){} 포함하고 있는 문장들을 조건식이 만족하는 동안 반복하는 문장 true인 동안 계속 반복이
		 * 되는 문장 반복횟수가 정확하지 않은 경우에 주로 사용한다.
		 */

		System.out.println();
		int count = 0;
		int a = 1;
		// a에 2씩 몇번을 곱해야 1000 이상이 되는가?

		// a가 1000보다 작은 경우에 계속 반복을 한다.
		while (a < 1000) {
			a *= 2;
			count++;
			System.out.println(count + " : " + a);
		}

		/*
		 * do while문 //while문이 조금 변형된 형태, do가 앞에오고 while문이 뒤에 있다. //처음시작할 때 do
		 * 먼저 하고 while문 조건식 반복하는 것 //때문에 무조건 1번은 도는 반복문이라 할 수 있음. -
		 * do{}while(조건식); - 최소한 한번의 수행을 보장한다.
		 */

		// 숫자 맞추기 게임
		// 안쪽에서 변수 만들면 나중에 사용 못해서 밖에 변수를 선언해줌.
		/*
		 * int answer = (int)(Math.random() * 100) + 1; int input = 0; Scanner s
		 * = new Scanner(System.in); do{
		 * System.out.println("1 ~ 100 사이의 수를 입력해주세요.>"); input =
		 * Integer.parseInt(sc.nextLine());
		 * 
		 * if(answer < input){ System.out.println(input + "보다 작습니다."); }else
		 * if(input < answer){ System.out.println(input + "보다 큽니다."); }else{
		 * System.out.println("정답입니다."); } }while(input != answer);
		 */

		/*
		 * 조건을 검사해야하는데 뭔가 이루어지고 난 이후에 검사를 해야할 때 do-while문을 사용한다. for문은 반복횟수가 정해져
		 * 있다 / while문은 반복횟수가 정해지지 않았다.
		 */

		// 이름붙은 반복문
		// 반복문에 이름을 붙여줄 수 있다.

		// outer = for문에 붙인 이름.
		outer: for (int i = 2; i <= 9; i++) {
			for (int j = 1; j <= 9; j++) {
				if (j == 5) {
					// break; //가장 가까운 반복문 하나를 빠져나간다. (for반복문을 빠져나가니
					// System.out.println()이 실행된다)
					// break outer; // outer라는 이름의 반복문을 빠져나간다.
					// -> j == 5인 경우에 outer라는 반복문 모두에서 빠져나옴.
					// -> ***이런 기능이 필요할 때 반복문에 이름을 붙인다.
					// continue; //가장 가까운 반복문의 현재 반복회차를 빠져나간다.
					// ->break와 비슷한 역할을 한다.
					// ->현재 돌고 있는 문장에서만 빠져나와서 그 다음을 반복한다.
					// 다만 j == 5만 건너 띄고 나머지는 다 실행된다.
					// continue outer; //outer라는 이름의 현재 반복회차를 빠져나간다.
					// 위 4개 자주 사용되지 않지만 어떻게 사용되는지 원리를 알아두어야 한다.

				}
				System.out.println(i + " * " + j + " = " + i * j);
			}
			System.out.println();
		}

		/*
		 * System.out.println("*****"); System.out.println("*****");
		 * System.out.println("*****\n");
		 * 
		 * 
		 * for(int i = 1; i <= 3; i++) { for(int j = 1; j <= 5; j++) {
		 * System.out.print("*"); } System.out.println(); }
		 */

		/*
		 * ***** // 별이 점점 감소한다. **** *** ** *
		 * 
		 * * // 별이 점점 증가한다. ** *** **** *****
		 * 
		 * * // 별이 2씩 증가한다. *** ***** ******* *********
		 */

		// 삼각형 모양으로 출력하려면 처음에는 1번 출력되고,
		// 점점 출력하는 별의 갯수가 1개씩 늘어나야 함
		// == 이 말은 안쪽에 있는 for이 도는 횟수가 점점 늘어나야 한다는 뜻.

		/*
		 * for(int i = 5; i >= 1; i--) { for(int j = 1; j <= i; j++) {
		 * 
		 * System.out.print("*"); }System.out.println(); }
		 * 
		 * System.out.println();
		 * 
		 * for(int i =1; i <= 5; i++) { for(int x = 0; x < 5-i; x++) {
		 * System.out.print(" "); }
		 * 
		 * for(int j =1; j <= i; j++) { System.out.print("*"); }
		 * System.out.println(); }
		 * 
		 * System.out.println();
		 * 
		 * 
		 * for(int i =1; i <= 5; i++) { for(int x = 0; x < 5-i; x++) {
		 * System.out.print(" "); }
		 * 
		 * for(int j =1; j <= i; j++) { System.out.print("*"); }
		 * System.out.println(); }
		 */

		// 선생님 답
		for (int i = 1; i <= 5; i++) {
			for (int j = 5; j >= i; j--) {
				System.out.print("*");
			}
			System.out.println();
		}

		System.out.println();
		// --------------------------------------------------
		for (int i = 1; i <= 5; i++) {
			for (int j = 5; j >= i; j--) {
				System.out.print(" ");
			}

			for (int j = 1; j <= i; j++) {
				System.out.print("*");
			}
			System.out.println();
		}

		System.out.println();
		// -------------------------------------------------
		for (int i = 1; i <= 5; i++) {
			for (int j = 5; j >= i; j--) {
				System.out.print(" ");
			}

			for (int j = 1; j <= i * 2 - 1; j++) {
				System.out.print("*");
			}
			System.out.println();
		}
		// s.close();
	}

}
