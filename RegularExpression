package i_regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegularExpression {

	public static void main(String[] args) {
/*
		 * 정규표현식 : 문자열의 패턴을 검사하는 표현식
		 * 
		 * ^	뒷 문자로 시작	(^ 캐럿 ^a : a로시작하는 문자)
		 * $	앞 문자로 종료	(a$ : a로 종료하겠다)
		 * .	임의의 문자(줄바꿈 제외) (. 한글자 표현)
		 * *	앞 문자가 0개 이상 (abc *: abc 앞글자 3개)
		 * +	앞 문자가 1개 이상
		 * ?	앞 문자가 없거나 1개
		 * []	문자의 집합이나 범위([a-z]:a부터 z까지, [^a-z]:a부터 z가 아닌것)
		 * {}	앞 문자의 개수({2}:2개, {2,4}:2개 이상 4개 이하) (중괄호)
		 * ()	그룹화 (소괄호)
		 * |	OR연산
		 * \s	공백, 탭, 줄바꿈
		 * \S	공백, 탭, 줄바꿈이 아닌 문자
		 * \w	알파벳이나 숫자
		 * \W	알파벳이나 숫자가 아닌 문자
		 * \d	숫자
		 * \D	숫자가 아닌 문자
		 * (?i)	뒷 문자의 대소문자 구분 안함
		 * \	정규표현식에서 사용되는 특수문자 표현
*/
	
		
//		String str = "abc123";
//		String regex = "[a-z]{3}[0-9]{1,3}";
//		String regex = "[a-z0-9]+";
//		String regex = "\\w*"; //  \ 한개면 탈출, \\면 다시 원상태로
//		String regex = ".*"; //줄바꿈을 제외한 어떤 문자도 상관없음
		
		//최대한 내가 원하는 패턴을 출력하고 싶으면 좁은표현을 쓰자
		
		
//		Pattern p = Pattern.compile(regex);
//		Matcher m = p.matcher(str); //str과 matcher 값이 같으면 true
//		System.out.println(m.matches()); // str과 matcher 같으면 true 대문자 등 다르면 false
		
//문1. 아이디, 전화번호, 이메일주소 유효성 검사 정규표현식 만들기
		String id = "naver_5241";
		String regex1 = "[[a-z]{1}[0-9][-][_]]{5,20}$";
		Pattern p = Pattern.compile(regex1);
		Matcher m = p.matcher(id); //str과 matcher 값이 같으면 true
		System.out.println(m.matches()); // str과 matcher 같으면 true 대문자 등 다르면 fals

// 		전화번호
		String telnumber = "01072724141";
		String regex2 = "[0-9]{10,11}$";
		p = Pattern.compile(regex2);
		m = p.matcher(telnumber); //str과 matcher 값이 같으면 true
		System.out.println(m.matches());	
		
//		이메일주소
		String email = "a15241@naver.com";
		String regex3 = "[a-zA-Z]{1}[a-zA-Z0-9_@].*";
		p = Pattern.compile(regex3);
		m = p.matcher(email); //str과 matcher 값이 같으면 true
		System.out.println(m.matches());	
		
		//아이디, 전화번호, 이메일주소의 유효성을 검사하는 정규표현식을 만들어주세요.
		//아이디 : [a-z0-9_-]{5,20}
		//전화번호 : ^0\\d{1,3}-\\d{3,4}-\\d{4}
		//이메일주소 : [a-z0-9_-]{5,20}@[a-zA-Z]+\\.(?i)(com|net|org|([a-z]{2}\\.kr))$
		
	}

}
