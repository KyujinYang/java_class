package service;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import util.ScanUtil;
import util.View;
import controller.Controller;
import dao.UserDao;

public class UserService {
	// user관련 일을 하는 클래스

	// 1.싱글톤 패턴 구성-굳이 여러개 객체 필요X
	private UserService() {
	}

	private static UserService instance;
	private static Map<String, Object> userMap = null; // 회원가입 시 입력한 정보들을 저장한다.

	public static UserService getInstance() {
		if (instance == null) {
			instance = new UserService();
		}
		return instance;
	}

	private UserDao userDao = UserDao.getInstance();

	// 아이디 중복 확인 생략
	// 비밀번호 확인 생략
	// 정규표현식(유효성 검사) 생략

	public int join() { // int 리턴타입(다음타입리턴을 위해 필요)
		userMap = new HashMap<>();
		
		System.out.println("==============회원가입===============");
		
		// while
		while (true) {
			Pattern p = null;
			Matcher m = null;
			
			/*
			 * 1. 아이디 입력
			 */
			if(userMap.get("MEM_ID") == null) {
				System.out.println("아이디를 입력해주세요(영문으로 시작)> ");
				String memId = ScanUtil.nextLine();
				String regex1 = "^[a-zA-Z]{1}[a-zA-Z0-9_]{4,11}$"; // 영문으로 시작, 특수문자 '_'만 허용, 5 ~ 12자 이하
				p = Pattern.compile(regex1);
				m = p.matcher(memId); // str과 matcher 값이 같으면 true
				if (!m.matches()) {
					System.out.println("아이디를 다시 입력해주세요> ");
					System.out.println("영문으로 시작, 특수문자 '_'만 허용, 5 ~ 12자 이하>");
					continue;
				}
				// 아이디 중복확인
				Map<String, Object> memCntMap = userDao.selectMemIdCount(memId);
				BigDecimal memCnt = (BigDecimal) memCntMap.get("MEM_CNT");
				if(memCnt != null && memCnt.intValue() > 0) {
					System.out.println("이미 존재하는 아이디 입니다. 아이디를 다시 입력해주세요> ");
					continue;
				}
				userMap.put("MEM_ID", memId);
			}

			/*
			 * 2. 비밀번호 입력 + 비밀번호 확인 검사 추가
			 */
			if(userMap.get("MEM_PW") == null) {
				System.out.print("비밀번호를 입력해주세요(특수문자 한글자이상)>");
				String memPw1 = ScanUtil.nextLine();
				String regex2 = "([a-zA-Z0-9].*[!,@,#,$,%,^,&,*,?,_,~])|([!,@,#,$,%,^,&,*,?,_,~].*[a-zA-Z0-9])";
				System.out.println("비밀번호를 다시 입력해주세요");
				String memPw2 = ScanUtil.nextLine();
				// 문자,숫자,특수문자가 모두 포함되는 비밀번호 입력
				p = Pattern.compile(regex2);
				m = p.matcher(memPw1); // str과 matcher 값이 같으면 true
				if (!m.find()) {					
					memPw1 = equals(memPw2)
					
					
					continue;
				}
				userMap.put("MEM_PW", memPw);
			}
			
			/*
			 * 3. 개인정보 입력
			 */
			// 회원명은 필수값입니다 반드시 입력해주세요.
			System.out.print("회원명>");
			String memNcnm = ScanUtil.nextLine();
			
			// 별명 필수값
			System.out.print("별명>");
			String memName = ScanUtil.nextLine();
			
			// 전화번호 필수값 + 전화번호 정규식 010-0000-000 or 02-111-2222
			System.out.print("전화번호>");
			String userTelNo = ScanUtil.nextLine();
			
			System.out.print("주소>");
			String userAdres = ScanUtil.nextLine();
			
			userMap.put("MEM_NM", memName);
			userMap.put("MEM_NCNM", memNcnm);
			userMap.put("MEM_TELNO", userTelNo);
			userMap.put("MEM_ADRES", userAdres);
			

			/*
			 * /정규식 유효성검사 클래스 생성 //JoinProc a = new JoinProc(); JoinProc
			 * ClassJoin = new JoinProc(); //boolean b = a.check(param) boolean
			 * b = ClassJoin.check(param); //if(b){ if(b){
			 * System.out.println("성공"); }
			 */

			int result = userDao.insertUser(userMap);
			// 몇개 행이 영향을 받았는지

			if (0 < result) {
				System.out.println("회원가입 성공");
			} else {
				System.out.println("회원가입 실패");
			}
			break; // while문 break;
			// }else{
			// 틀린겨우 계속 입력
			// System.out.println();
			// } // if
		}// while
		return View.HOME;
	}

	public int login() {

		while (true) {
			System.out.print("아이디를 입력해주세요> ");
			String memId = ScanUtil.nextLine();
			String regex1 = "^[a-zA-Z]{1}[a-zA-Z0-9_]{4,11}$"; // 영문으로 시작, 특수문자 '_'만 허용, 5 ~ 12자 이하
			Pattern p = Pattern.compile(regex1);
			Matcher m = p.matcher(memId); // str과 matcher 값이 같으면 true
			if (!m.matches()) {
				System.out.println("아이디를 다시 입력해주세요");
				continue;
			}

		System.out.print("비밀번호>");
		String memPw = ScanUtil.nextLine();
		String regex2 = "([a-zA-Z0-9].*[!,@,#,$,%,^,&,*,?,_,~])|([!,@,#,$,%,^,&,*,?,_,~].*[a-zA-Z0-9])";
		// 문자,숫자,특수문자가 모두 포함되는 비밀번호
		p = Pattern.compile(regex2);
		m = p.matcher(memPw); // str과 matcher 값이 같으면 true
		if (!m.find()) {
			System.out.println("비밀번호가 틀렸습니다");

		}

		Map<String, Object> user = userDao.selectUser(memId, memPw);

		if (user == null) {
			System.out.println("아이디 혹은 비밀번호를 잘못 입력하셨습니다");
		} else {
			System.out.println("로그인 성공! ");
			Controller.LoginUser = user;
			return View.BOARD_LIST;
		}
		return View.LOGIN;
		}
	}
}
