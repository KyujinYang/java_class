package e_oop;

public class N6_Static {

	/*
	 * static을 붙이면 프로그램 실행시 메모리에 올라간다. 객체생성을 하지 않아도 사용할 수 있다. static을 붙인 변수는
	 * 객체간에 변수의 값을 공유한다. static이 붙은 멤버의 명칭: '클래스 변수, 클래스 메서드' 라고 부른다. -> 클래스를 통해
	 * 변수와 메서드를 사용하기 때문 static이 붙지 않은 멤버의 명칭: '인스턴스 변수, 인스턴스 메서드' 라고 부른다 ->
	 * 인스턴스(객체)를 통해 변수와 메서드를 사용하기 때문
	 */

	// 값을 공유하기 위해 static을 붙인다.
	static int var; // static은 변수 앞에 붙인다.

	// 이렇게 붙임으로써 변수의 값을 공유하게 된다.

	public static void main(String[] args) {
		Saram s1 = new Saram();
		Saram s2 = new Saram();

		s1.name = "철수";
		s2.name = "영희";

		s1.saveMoney(100000);
		s2.saveMoney(200000);

		s1.saveDateMoney(200000);
		s2.saveDateMoney(200000); // 값을 공유하기 때문에 데이트 통장 잔고는 최종 400000원이 되었다.

	}
}

class Saram {

	String name; // 이름
	int account; // 통장의 잔고

	void saveMoney(int money) {

		account += money;
		System.out.println(name + "통장의 잔고: " + account + "원");
	}

	static int dateAccount; // 데이트 통장의 잔고

	// static이 붙은 dateAccount변수를 사용하기 위해서 메서드에도 static을 붙여준다.
	static void saveDateMoney(int money) {
		dateAccount += money;
		System.out.println("데이트 통장 잔고: " + dateAccount + "원");

		// static을 사용하면 객체를 생성하지 않아도 되는데 이 과정을 통해 메모리의 낭비를 줄일 수 있다.
		// Math.random();
		// Math.round();
		// 이러한 메서드는 Math라는 클래스에 있지만 우리가 객체 생성을 해서 사용한 것이 아님
		// 이런 메서드들이 바로 static이 붙은 static 메서드라 할 수 있다.
		System.out.println(Math.random());
		// ctrl눌러서 Math.random()들어가보면 static붙은거 확인할 수 있음.

		System.out.println("문자열 입력> ");
		String intput1 = N7_ScanUtil.nextLine();

		System.out.println("숫자 입력> ");
		int input2 = N7_ScanUtil.nextInt();
	}

}
